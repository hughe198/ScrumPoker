{"ast":null,"code":"var _class;\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction LobbyComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"input\", 7);\n    i0.ɵɵlistener(\"ngModelChange\", function LobbyComponent_div_6_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.inputValue = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function LobbyComponent_div_6_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.createRoom());\n    });\n    i0.ɵɵtext(3, \" Create room \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.inputValue);\n  }\n}\nfunction LobbyComponent_div_13_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 10)(3, \"h3\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 6)(6, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function LobbyComponent_div_13_div_1_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const room_r6 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.enterRoom(room_r6.key));\n    });\n    i0.ɵɵtext(7, \" Enter room \");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const room_r6 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(room_r6.value.room_name);\n  }\n}\nfunction LobbyComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, LobbyComponent_div_13_div_1_Template, 8, 1, \"div\", 9);\n    i0.ɵɵpipe(2, \"keyvalue\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 1, ctx_r1.gameRooms));\n  }\n}\nexport class LobbyComponent {\n  constructor(apiService) {\n    this.apiService = apiService;\n    this.inputValue = '';\n    this.gameRooms = {};\n    this.errorMessage = ''; // Add error message variable\n    this.showLobby = true;\n    this.enterRoomID = new EventEmitter();\n  }\n  getRooms() {\n    this.apiService.getRooms().subscribe(data => {\n      this.gameRooms = data;\n    }, error => {\n      this.errorMessage = 'Error fetching rooms: ' + error.message;\n    });\n  }\n  createRoom() {\n    this.apiService.createRoom(this.inputValue).subscribe(response => {\n      console.log('POST Request Successful', response);\n      this.getRooms();\n    }, error => {\n      console.error('POST Request Error', error);\n    });\n  }\n  enterRoom(roomID) {\n    this.showLobby = false;\n    this.enterRoomID.emit(Number(roomID));\n  }\n  ngOnInit() {\n    this.getRooms();\n  }\n}\n_class = LobbyComponent;\n_class.ɵfac = function LobbyComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.ApiService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-lobby\"]],\n  outputs: {\n    enterRoomID: \"enterRoomID\"\n  },\n  decls: 14,\n  vars: 2,\n  consts: [[1, \"d-flex\", \"justify-content-center\"], [1, \"w-25\", \"card\", \"border\", \"border-1\", \"border-secondary\", \"rounded\", \"m-2\"], [1, \"card-title\"], [1, \"text-start\", \"m-2\"], [\"class\", \"card-body d-flex justify-content-center\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"card-body\", \"d-flex\", \"justify-content-center\"], [\"type\", \"text\", \"placeholder\", \"Room Name\", 1, \"mx-2\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-primary\", \"mt-2\", 3, \"click\"], [\"class\", \"d-flex justify-content-center\", 4, \"ngFor\", \"ngForOf\"], [1, \"card-title\", \"text-start\", \"m-2\"]],\n  template: function LobbyComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h3\");\n      i0.ɵɵtext(5, \"Create a room\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(6, LobbyComponent_div_6_Template, 4, 1, \"div\", 4);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(7, \"div\", 0)(8, \"div\", 1)(9, \"div\", 2)(10, \"div\", 3)(11, \"h3\");\n      i0.ɵɵtext(12, \"Enter a room\");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵtemplate(13, LobbyComponent_div_13_Template, 3, 3, \"div\", 5);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLobby);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLobby);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i2.KeyValuePipe],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["EventEmitter","i0","ɵɵelementStart","ɵɵlistener","LobbyComponent_div_6_Template_input_ngModelChange_1_listener","$event","ɵɵrestoreView","_r3","ctx_r2","ɵɵnextContext","ɵɵresetView","inputValue","ɵɵelementEnd","LobbyComponent_div_6_Template_button_click_2_listener","ctx_r4","createRoom","ɵɵtext","ɵɵadvance","ɵɵproperty","ctx_r0","LobbyComponent_div_13_div_1_Template_button_click_6_listener","restoredCtx","_r8","room_r6","$implicit","ctx_r7","enterRoom","key","ɵɵtextInterpolate","value","room_name","ɵɵtemplate","LobbyComponent_div_13_div_1_Template","ɵɵpipeBind1","ctx_r1","gameRooms","LobbyComponent","constructor","apiService","errorMessage","showLobby","enterRoomID","getRooms","subscribe","data","error","message","response","console","log","roomID","emit","Number","ngOnInit","ɵɵdirectiveInject","i1","ApiService","selectors","outputs","decls","vars","consts","template","LobbyComponent_Template","rf","ctx","LobbyComponent_div_6_Template","LobbyComponent_div_13_Template"],"sources":["D:\\small projects\\ScrumPoker\\scrumPoker_Angular\\scrumpoker\\src\\app\\lobby\\lobby.component.ts","D:\\small projects\\ScrumPoker\\scrumPoker_Angular\\scrumpoker\\src\\app\\lobby\\lobby.component.html"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { gameRooms } from '../iAPI.interface';\n\n@Component({\n  selector: 'app-lobby',\n  templateUrl: './lobby.component.html',\n  styleUrls: ['./lobby.component.scss'],\n})\nexport class LobbyComponent implements OnInit {\n  inputValue: string = '';\n  gameRooms: gameRooms = {};\n  errorMessage: string = ''; // Add error message variable\n  showLobby = true;\n  @Output() enterRoomID = new EventEmitter<number>();\n\n  constructor(private apiService: ApiService) {}\n\n  getRooms() {\n    this.apiService.getRooms().subscribe(\n      (data) => {\n        this.gameRooms = data;\n      },\n      (error) => {\n        this.errorMessage = 'Error fetching rooms: ' + error.message;\n      }\n    );\n  }\n\n  createRoom() {\n    this.apiService.createRoom(this.inputValue).subscribe(\n      (response) => {\n        console.log('POST Request Successful', response);\n        this.getRooms();\n      },\n      (error) => {\n        console.error('POST Request Error', error);\n      }\n    );\n  }\n\n  enterRoom(roomID: string) {\n    this.showLobby = false;\n    this.enterRoomID.emit(Number(roomID));\n  }\n\n  ngOnInit(): void {\n    this.getRooms();\n  }\n}\n","<div class=\"d-flex justify-content-center\">\n  <div class=\"w-25 card border border-1 border-secondary rounded m-2\">\n    <div class=\"card-title\">\n      <div class=\"text-start m-2\">\n        <h3>Create a room</h3>\n      </div>\n      <div *ngIf=\"showLobby\" class=\"card-body d-flex justify-content-center\">\n        <input\n          class=\"mx-2\"\n          type=\"text\"\n          placeholder=\"Room Name\"\n          [(ngModel)]=\"inputValue\"\n        />\n        <button class=\"btn btn-primary mt-2\" (click)=\"createRoom()\">\n          Create room\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"d-flex justify-content-center\">\n  <div class=\"w-25 card border border-1 border-secondary rounded m-2\">\n    <div class=\"card-title\">\n      <div class=\"text-start m-2\">\n        <h3>Enter a room</h3>\n      </div>\n    </div>\n  </div>\n</div>\n<div *ngIf=\"showLobby\">\n  <div\n    class=\"d-flex justify-content-center\"\n    *ngFor=\"let room of gameRooms | keyvalue\"\n  >\n    <div class=\"w-25 card border border-1 border-secondary rounded m-2\">\n      <div class=\"card-title text-start m-2\">\n        <h3>{{ room.value.room_name }}</h3>\n      </div>\n      <div class=\"card-body d-flex justify-content-center\">\n        <button class=\"btn btn-primary mt-2\" (click)=\"enterRoom(room.key)\">\n          Enter room\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}