{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiURL = environment.apiLocalHost;\n  }\n  getPlayer(playerID) {\n    return this.http.get(this.apiURL + 'players/' + playerID);\n  }\n  getPlayers() {\n    return this.http.get(this.apiURL + '/players');\n  }\n  getRoom(roomID) {\n    return this.http.get(this.apiURL + '/rooms/' + roomID);\n  }\n  getRooms() {\n    return this.http.get(this.apiURL + '/rooms');\n  }\n  createRoom(roomName) {\n    let newRoom = {\n      room_name: roomName\n    };\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(this.apiURL + '/rooms', newRoom, {\n      headers\n    });\n  }\n  createPlayer(playerName) {\n    let newPlayer = {\n      player_name: playerName\n    };\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(this.apiURL + '/newplayer');\n  }\n  deleteRoom(roomID) {\n    return this.http.delete(this.apiURL + '/rooms/' + roomID);\n  }\n}\n_class = ApiService;\n_class.ɵfac = function ApiService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","environment","ApiService","constructor","http","apiURL","apiLocalHost","getPlayer","playerID","get","getPlayers","getRoom","roomID","getRooms","createRoom","roomName","newRoom","room_name","headers","post","createPlayer","playerName","newPlayer","player_name","deleteRoom","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\small projects\\ScrumPoker\\scrumPoker_Angular\\scrumpoker\\src\\app\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport {\n  player,\n  players,\n  gameRoom,\n  gameRooms,\n  RoomCreate,\n  NewPlayer,\n} from 'src/app/iAPI.interface';\nimport { PlayerComponent } from './player/player.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService {\n  private apiURL = environment.apiLocalHost;\n\n  constructor(private http: HttpClient) {}\n\n  getPlayer(playerID: number): Observable<player> {\n    return this.http.get<player>(this.apiURL + 'players/' + playerID);\n  }\n\n  getPlayers(): Observable<players> {\n    return this.http.get<players>(this.apiURL + '/players');\n  }\n\n  getRoom(roomID: string): Observable<gameRoom> {\n    return this.http.get<gameRoom>(this.apiURL + '/rooms/' + roomID);\n  }\n\n  getRooms(): Observable<gameRooms> {\n    return this.http.get<gameRooms>(this.apiURL + '/rooms');\n  }\n\n  createRoom(roomName: string): Observable<RoomCreate> {\n    let newRoom: RoomCreate = { room_name: roomName };\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http.post<RoomCreate>(this.apiURL + '/rooms', newRoom, {\n      headers,\n    });\n  }\n\n  createPlayer(playerName: string): Observable<player> {\n    let newPlayer: player = { player_name: playerName };\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    return this.http.post<player>(this.apiURL + '/newplayer');\n  }\n\n  deleteRoom(roomID: string): Observable<gameRoom> {\n    return this.http.delete<gameRoom>(this.apiURL + '/rooms/' + roomID);\n  }\n}\n"],"mappings":";AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,WAAW,QAAQ,0CAA0C;;;AActE,OAAM,MAAOC,UAAU;EAGrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAGJ,WAAW,CAACK,YAAY;EAEF;EAEvCC,SAASA,CAACC,QAAgB;IACxB,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAS,IAAI,CAACJ,MAAM,GAAG,UAAU,GAAGG,QAAQ,CAAC;EACnE;EAEAE,UAAUA,CAAA;IACR,OAAO,IAAI,CAACN,IAAI,CAACK,GAAG,CAAU,IAAI,CAACJ,MAAM,GAAG,UAAU,CAAC;EACzD;EAEAM,OAAOA,CAACC,MAAc;IACpB,OAAO,IAAI,CAACR,IAAI,CAACK,GAAG,CAAW,IAAI,CAACJ,MAAM,GAAG,SAAS,GAAGO,MAAM,CAAC;EAClE;EAEAC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACT,IAAI,CAACK,GAAG,CAAY,IAAI,CAACJ,MAAM,GAAG,QAAQ,CAAC;EACzD;EAEAS,UAAUA,CAACC,QAAgB;IACzB,IAAIC,OAAO,GAAe;MAAEC,SAAS,EAAEF;IAAQ,CAAE;IACjD,MAAMG,OAAO,GAAG,IAAIlB,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IAEF,OAAO,IAAI,CAACI,IAAI,CAACe,IAAI,CAAa,IAAI,CAACd,MAAM,GAAG,QAAQ,EAAEW,OAAO,EAAE;MACjEE;KACD,CAAC;EACJ;EAEAE,YAAYA,CAACC,UAAkB;IAC7B,IAAIC,SAAS,GAAW;MAAEC,WAAW,EAAEF;IAAU,CAAE;IACnD,MAAMH,OAAO,GAAG,IAAIlB,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IACF,OAAO,IAAI,CAACI,IAAI,CAACe,IAAI,CAAS,IAAI,CAACd,MAAM,GAAG,YAAY,CAAC;EAC3D;EAEAmB,UAAUA,CAACZ,MAAc;IACvB,OAAO,IAAI,CAACR,IAAI,CAACqB,MAAM,CAAW,IAAI,CAACpB,MAAM,GAAG,SAAS,GAAGO,MAAM,CAAC;EACrE;;SA1CWV,UAAU;;mBAAVA,MAAU,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAV3B,MAAU;EAAA4B,OAAA,EAAV5B,MAAU,CAAA6B,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}